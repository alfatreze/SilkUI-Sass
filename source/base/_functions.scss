
// SassMeister Input

// string functions to camelize, capitalize, ucwords, ...

// https://gist.github.com/pascalduez/10011785


// Capitalize string
// --------------------------------------------------------------------------------
// @param [string] $string
// --------------------------------------------------------------------------------
// @return [string]

@function capitalize($string) {
    @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
  }
  
  // Alias
  @function str-ucfirst($string) {
    @return capitalize($string);
  }
  
  
  
  // Uncapitalize string
  // --------------------------------------------------------------------------------
  // @param [string] $string
  // --------------------------------------------------------------------------------
  // @return [string]
  
  @function uncapitalize($string) {
    @return to-lower-case(str-slice($string, 1, 1)) + str-slice($string, 2);
  }
  
  // Alias
  @function str-lcfirst($string) {
    @return uncapitalize($string);
  }
  
  
  
  // Capitalize each word in string
  // --------------------------------------------------------------------------------
  // @param [string] $string
  // --------------------------------------------------------------------------------
  // @return [string]
  
  @function str-ucwords($string) {
    $progress: $string;
    $result: "";
  
    $running: true;
  
    @while $running {
      $index: str-index($progress, " ");
      @if $index {
        $result: $result + capitalize(str-slice($progress, 1, $index));
        $progress: str-slice($progress, ($index + 1));
      }
      @else {
        $running: false;
      }
    }
  
    @return capitalize($result) + capitalize($progress);
  }
  
  
  
  // Return whether `$value` is contained in `$list`
  // --------------------------------------------------------------------------------
  // @param [list] $list
  // @param [$value] $value
  // --------------------------------------------------------------------------------
  // @return [boolean]
  
  @function contain($list, $value) {
    @return not not index($list, $value);
  }
  
  
  
  // Camelize string
  // --------------------------------------------------------------------------------
  // @param [string] $string
  // --------------------------------------------------------------------------------
  // @return [string]
  
  @function camelize($string) {
    $progress: $string;
    $result: "";
    $exclude: " ", "-", "--", "–", "—", "_", ",", ";", ":", ".";
    
    @while str-length($progress) > 0  {
      $char: str-slice($progress, 1, 1);
  
      @if contain($exclude, $char) {
        $progress: capitalize(str-slice($progress, 2, 2)) + str-slice($progress, 3);
      }
      @else {
        $result: $result + $char;
        $progress: str-slice($progress, 2);
      }
   }
    
    @return $result;
  }


  // Pascalize string
  // --------------------------------------------------------------------------------
  // @param [string] $string
  // --------------------------------------------------------------------------------
  // @return [string]

  @function pascalize($input) {
    $str: '';
    $capital: true;
    $hyphen: false;
    
    @for $i from 1 through str-length($input) {
      $char: str-slice($input, $i, $i);
      
      @if $char != '-' {
        $str: $str + if($capital, to-upper-case($char), $char);
        
        $capital: false;
        $hyphen: false;
      } @else {
        // Allowing double hyphen for BEM syntax
        @if $hyphen {
          $str: $str + '--';
          $hyphen: false;
        } @else {
          $hyphen: true;
        }
        
        $capital: true;
      }
    }
    
    @return $str;
  }

  // Pascalize First Only string
  // --------------------------------------------------------------------------------
  // @param [string] $string
  // --------------------------------------------------------------------------------
  // @return [string]
  
    @function remove-dash($input) {
      $str: '';
      $hyphen: false;
      
      @for $i from 1 through str-length($input) {
        $char: str-slice($input, $i, $i);
        
        @if $char != '-' {
          $str: $str + $char;
          
          $hyphen: false;
        } @else {
          // Allowing double hyphen for BEM syntax
          @if $hyphen {
            $str: $str + '--';
            $hyphen: false;
          } @else {
            $hyphen: true;
          }

        }
      }
      
      @return $str;
    }



/* EXAMPLE USAGE 

  sass {
    capitalize: capitalize("hello");
    uncapitalize: uncapitalize("HELLO");
    ucwords: str-ucwords("Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
    camelize: camelize("my-function-name");
    camelize: camelize("Another class constructor.");
  }

OUTPUT
  sass {
    capitalize: "Hello";
    uncapitalize: "hELLO";
    ucwords: "Lorem Ipsum Dolor Sit Amet, Consectetur Adipisicing Elit, Sed Do Eiusmod Tempor Incididunt Ut Labore Et Dolore Magna Aliqua.";
    camelize: "myFunctionName";
    camelize: "AnotherClassConstructor";
  }

  */



  // COLOR Functions

  
// Get nested colors from the map
@function setcolor($scheme, $tone: base) {
  @return map-get(map-get($colorscheme, $scheme), $tone);
}

// Get deep map
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// Get a color
@function color($key) {
  // Display an error if the color does not exist in the map
  @if not map-has-key($color-map, $key) {
      @warn "Key `#{$key}` not found in $colors-map.";
    }
  // Return the output
  @return map-get($color-map, $key);
}


