
/* Buttons **************************/
// Originally from useful section

// This map should automate building standard buttons
$buttons: (
    "": "orange", // Default button
    "Is_Default": "orange",
    "Success": "green",
    "Danger": "red",
    "Cancel": "orange",
    "Link": "orange",
);

// map currently lists all button vasriants
// not actually used anywhere
$buttons-map: (
    "": "orange", // Default button
    "Is_Default": "orange",
    "Success": "green",
    "Danger": "red",
    "Cancel": "orange",
    "Link": "orange",
    "Disabled": "green",
    "Small": "red",
    "Icon": "red",
    "Load": "red"
);


// Generate standard buttons
@each $name, $value in $buttons {
    // Use function to capitalize each word
	.#{pascalize($name)} {
        // Get nested map name and color from function
        background-color: $value;
        color: $value;
	}
} 


// Button defaults
.Button,
a.Button {
    background-color: #cfcfcf;
    border: 1px solid #999;
    cursor: pointer;
    display: inline-block;
    height: 32px;
    line-height: 30px;
    margin-left: 10px;
    min-width: 80px;
    padding: 0 15px;
    color: #999;
    font-size: 14px;
    text-align: center;
    text-decoration: none;

    // disabled state
    // originally not included in a.Button class, only .Button
    &[disabled],
    &:disabled {
        background-color: #ccc;
        border: 0;
        box-shadow: none;
        color: #999;
        pointer-events: none;
    }

    /*
    // Duplicated rule 
    // altough there are differences in the properties has been removed
    &[disabled],
    &:disable {
        background-color: #fff;
        border: 1px solid #ccc;
        color: #ccc;
    }
    */

    @if ($desktop) { // check if desktop is true

        .desktop & {
            &:hover {
                background-color: #e2e2e2;
                text-decoration: none;
            }
        }

        // Originally did not included ButtonDefault class for disabled status
        .desktop & {
            &[disabled]:hover,
            &:disabled:hover {
                background-color: #ccc;
                border: 0;
                box-shadow: none;
                color: #999;
            }
        }
        
    }

    @if ($tablet) { // check if desktop is true
        
        .tablet & {
            // Copied from same class which included both phone & tablet
            height: 38px;
            line-height: 36px;
            // text-decoration: none; // inherited not needed

            &[disabled]:hover,
            &:disabled:hover {
                background-color: #ccc;
                border: 0;
                box-shadow: none;
                color: #999;
            }
        }
        
    }

    @if ($phone) { // check if desktop is true
        
        .phone & {
            // Copied from same class which included both phone & tablet
            height: 38px;
            line-height: 36px;
            // text-decoration: none; // inherited not needed

            &[disabled]:hover,
            &:disabled:hover {
                background-color: #ccc;
                border: 0;
                box-shadow: none;
                color: #999;
            }
        }
        
    }

        // Validate exact icon use case ???
    // Should this be with the icon class?
    span.fa {
        margin-right: 5px;
    }
}

/*// Removed and separated into individual properties for phone and tablet
.phone .Button,
.phone a.Button,
.tablet .Button,
.tablet a.Button {
    height: 38px;
    line-height: 36px;
    text-decoration: none;
}*/


// Is there really a need to bind the hover to the .desktop class?
// THey won't show on mobile any way... not really a big optimization!

.Button {

    // Default Button
    &.ButtonDefault,
    &.Is_Default {
        background-color: #125f90;
        border-color: #0d4d75;
        color: #fff;
        text-shadow: none;

        // Copied from base button styles
        &[disabled],
        &:disabled {
            background-color: #ccc;
            border: 0;
            box-shadow: none;
            color: #999;
            pointer-events: none;
        }

        @if ($desktop) { // check if desktop is true
            
            // Moved from base button
            // Here it does not target 'a.Button' anymore...
            .desktop & {
                &:hover {
                    background-color: #499acd;
                    border-color: #125f90;
                }
            }

            // Originally did not included ButtonDefault class for disabled status
            .desktop & {
                &[disabled]:hover,
                &:disabled:hover {
                    background-color: #ccc;
                    border: 0;
                    box-shadow: none;
                    color: #999;
                }
            }
        }
    }
    
    // Action & State Buttons
    &.Cancel {
        background-color: #fff;
        border-color: #0d4d75;
        color: #125f90;
    
        &[disabled],
        &:disabled {
            background-color: transparent;
            border: 1px solid #ccc;
            border-color: #ccc;
            color: #999;
        }
    
        @if ($desktop) { // check if desktop is true
            
            .desktop &:hover {
                //background-color: #fff;
                border-color: #499acd;
                color: #499acd;
            }

            .desktop & {
                &[disabled]:hover,
                &:disabled:hover {
                    background-color: #ccc;
                    border: 0;
                    box-shadow: none;
                    color: #999;
                }
            }
        
        }
    }
    
    &.Success {
        background-color: #a9c264;
        border-color: #96ad58;
        color: #fff;
    
        &[disabled],
        &:disabled {
            background-color: #ccc;
            border: 0;
            box-shadow: none;
            color: #999;
            pointer-events: none;
        }
    
        @if ($desktop) { // check if desktop is true
            
            .desktop &:hover {
                background-color: #c0dc74;
                border-color: #b3ce68;
            }

            .desktop & {
                &[disabled]:hover,
                &:disabled:hover {
                    background-color: #ccc;
                    border: 0;
                    box-shadow: none;
                    color: #999;
                }
            }
        }
    }
    
    
    &.Danger {
        background-color: #e09d90;
        border-color: #df3a01;
        color: #fff;
    
        &[disabled],
        &:disabled {
            background-color: #ccc;
            border: 0;
            box-shadow: none;
            color: #999;
            pointer-events: none;
        }
    
        @if ($desktop) { // check if desktop is true
            
            .desktop &:hover {
                background-color: #a6331b;
            }

            .desktop & {
                &[disabled]:hover,
                &:disabled:hover {
                    background-color: #ccc;
                    border: 0;
                    box-shadow: none;
                    color: #999;
                }
            }
        }
    }

    &.Link {
        background-color: #fff;
        border-color: #fff;
        color: #369;
    
        &[disabled],
        &:disabled {
            background-color: transparent;
            color: #999;
        }
    
        @if ($desktop) { // check if desktop is true
            
            .desktop &:hover {
                background-color: #fff;
                border-color: #499acd;
                color: #499acd;
            }
        }
    }

    // Icon
    &.Icon {
        min-width: 0;

        span.fa {
            margin: 0;
        }
    }
    
    // Loading Button
    &.Loading {

        &:before,
        &[disabled]:before,
        &:disabled:before {
            background-image: url(/WebPatterns/img/loadinggrey.GIF);
            background-size: 16px 16px;
            content: "";
            display: inline-block;
            height: 16px;
            margin-right: 5px;
            margin-top: -2px;
            vertical-align: middle;
            width: 16px;
        }

        &.Icon:before {
            margin-right: 0;
        }
        
        // Hide fontawesome icons when loading is used
        span.fa {
            display: none;
        }
    }
    
    &.ButtonDefault.Loading,
    &.Is_Default.Loading {
        &:before,
        &[disabled]:before,
        &:disabled:before {
            background-image: url(/WebPatterns/img/loading.GIF);
        }
    }
    
    &.Small.Loading:before {
        margin-top: 4px;
    }

     
    // Modifiers
    &.Small {
        font-size: 11px;
        height: 26px;
        line-height: 24px;
        min-width: 60px;
        padding-left: 10px;
        padding-right: 10px;

        // RESPONSIVE

        @if ($tablet) {
            // separated from same original class 
            // which targeted .phone and tablet
            height: 30px;
            line-height: 28px;
        }

        @if ($phone) {
            // separated from same original class
            // which targeted .phone and tablet
            height: 30px;
            line-height: 28px;
        }
    }

    &.FullWidth {
        display: block;
        margin-left: 0;
        margin-right: 0;
        width: 100%;
    }

    // Contextual Buttons
    .Panel__Actions &,
    .Section_Actions & {
        // Same properties as .Button.Small
        // originally part of same class
        font-size: 11px;
        height: 26px;
        line-height: 24px;
        min-width: 60px;
        padding-left: 10px;
        padding-right: 10px;
    }
}


// duplicated the class from .Button.Danger, a.ActionDelete {} 
// should validate types of actions and evaluate individual components
a.ActionDelete {
    background-color: #e09d90;
    border-color: #df3a01;
    color: #fff;
}